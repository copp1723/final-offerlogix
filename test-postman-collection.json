{
  "info": {
    "name": "Supermemory Memory Stack E2E Tests",
    "description": "Comprehensive test collection for validating MemoryMapper, QueryBuilder, RAG prompts, and multi-tenant isolation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "supermemoryApiKey",
      "value": "{{SUPERMEMORY_API_KEY}}",
      "type": "string"
    },
    {
      "key": "testClientA",
      "value": "demoA",
      "type": "string"
    },
    {
      "key": "testClientB", 
      "value": "demoB",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Seed Memory - Client A",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{supermemoryApiKey}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"Last spring SUV service push: Tue 10:00 performed best; tire promo CTR +18%.\",\n  \"containerTags\": [\"client:{{testClientA}}\", \"type:campaign_summary\"],\n  \"metadata\": {\n    \"campaignId\": \"past-1\",\n    \"vertical\": \"automotive\"\n  }\n}"
        },
        "url": {
          "raw": "https://api.supermemory.ai/v3/memories",
          "protocol": "https",
          "host": ["api", "supermemory", "ai"],
          "path": ["v3", "memories"]
        }
      }
    },
    {
      "name": "2. Campaign Chat - Memory Augmented",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"message\": \"We're planning a spring SUV service push. What timing and angle should we use?\",\n  \"clientId\": \"{{testClientA}}\",\n  \"currentStep\": \"context\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/campaigns/chat",
          "host": ["{{baseUrl}}"],
          "path": ["api", "campaigns", "chat"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Chat references memory (Tue or tire promo)\", function () {",
              "    const response = pm.response.json();",
              "    const message = response.message.toLowerCase();",
              "    pm.expect(message).to.satisfy(msg => msg.includes('tue') || msg.includes('tire') || msg.includes('10'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "3. Search Memory - Client A Only",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{supermemoryApiKey}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"q\": \"SUV spring timing + tire promo\",\n  \"limit\": 5,\n  \"onlyMatchingChunks\": true,\n  \"rewriteQuery\": true,\n  \"containerTags\": [\"client:{{testClientA}}\"]\n}"
        },
        "url": {
          "raw": "https://api.supermemory.ai/v3/search",
          "protocol": "https",
          "host": ["api", "supermemory", "ai"],
          "path": ["v3", "search"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Search returns client A data only\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.results).to.be.an('array');",
              "    // Should contain seeded SUV data",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "4. Webhook - Email Opened",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"event\": \"opened\",\n  \"message-id\": \"mid-test-123\",\n  \"recipient\": \"alex@example.com\",\n  \"timestamp\": 1720001111\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/webhooks/mailgun/events",
          "host": ["{{baseUrl}}"],
          "path": ["api", "webhooks", "mailgun", "events"]
        }
      }
    },
    {
      "name": "5. Webhook - Email Clicked",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"event\": \"clicked\",\n  \"message-id\": \"mid-test-123\",\n  \"recipient\": \"alex@example.com\",\n  \"timestamp\": 1720002222,\n  \"url\": \"https://dealer.example/test-drive\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/webhooks/mailgun/events",
          "host": ["{{baseUrl}}"],
          "path": ["api", "webhooks", "mailgun", "events"]
        }
      }
    },
    {
      "name": "6. Lead Scoring - After Events",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"leadEmail\": \"alex@example.com\",\n  \"clientId\": \"{{testClientA}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/leads/score",
          "host": ["{{baseUrl}}"],
          "path": ["api", "leads", "score"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Lead score increased after email events\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.score).to.be.above(0.5);",
              "    pm.expect(response.factors).to.include.keys('engagement');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "7. Multi-tenant Test - Seed Client B",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{supermemoryApiKey}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"DemoB campaign: different strategy, different results - winter focus\",\n  \"containerTags\": [\"client:{{testClientB}}\", \"type:campaign_summary\"],\n  \"metadata\": {\n    \"campaignId\": \"demoB-1\",\n    \"vertical\": \"automotive\"\n  }\n}"
        },
        "url": {
          "raw": "https://api.supermemory.ai/v3/memories",
          "protocol": "https",
          "host": ["api", "supermemory", "ai"],
          "path": ["v3", "memories"]
        }
      }
    },
    {
      "name": "8. Search Memory - Client B Isolation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{supermemoryApiKey}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"q\": \"campaign strategy results\",\n  \"limit\": 5,\n  \"onlyMatchingChunks\": true,\n  \"rewriteQuery\": true,\n  \"containerTags\": [\"client:{{testClientB}}\"]\n}"
        },
        "url": {
          "raw": "https://api.supermemory.ai/v3/search",
          "protocol": "https",
          "host": ["api", "supermemory", "ai"],
          "path": ["v3", "search"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Client B sees only their data (winter, not spring)\", function () {",
              "    const response = pm.response.json();",
              "    const content = JSON.stringify(response.results).toLowerCase();",
              "    pm.expect(content).to.include('winter');",
              "    pm.expect(content).to.not.include('spring');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}