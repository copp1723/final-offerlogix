/**
 * Main validation method - call this before sending any email
 */
async validateOutboundEmail(emailData: OutboundEmailData): Promise<EmailValidationResult> {
  const result: EmailValidationResult = {
    allowed: true,
    blocked: false,
    quarantined: false,
    requiresApproval: false,
    reasons: [],
    triggeredRules: [],
    riskScore: 0,
  };

  try {
    // Sort rules by priority (highest first)
    const sortedRules = this.blockRules
      .filter(rule => rule.enabled)
      .sort((a, b) => b.priority - a.priority);

    for (const rule of sortedRules) {
      const ruleResult = await this.evaluateRule(rule, emailData);

      if (ruleResult.triggered) {
        result.triggeredRules.push(rule.name);
        result.reasons.push(...ruleResult.reasons);

        if (rule.actions.block) {
          result.blocked = true;
          result.allowed = false;
        }

        if (rule.actions.quarantine) {
          result.quarantined = true;
          result.allowed = false;
        }

        if (rule.actions.requireApproval) {
          result.requiresApproval = true;
          result.allowed = false;
        }

        if (rule.actions.notifyAdmin) {
          await this.notifyAdmin(emailData, rule.name, ruleResult.reasons);
        }

        // If blocked or quarantined, stop processing further rules
        if (result.blocked || result.quarantined) {
          break;
        }
      }
    }

    // Cap risk score at 100
    result.riskScore = Math.min(result.riskScore, 100);

    // Log the validation result
    logger.info('Email validation completed', {
      to: emailData.to,
      allowed: result.allowed,
      riskScore: result.riskScore,
      triggeredRules: result.triggeredRules.length,
    });

    return result;
  } catch (error) {
    logger.error('Error validating outbound email', { error, to: emailData.to });

    // Fail safe - block email if validation fails
    return {
      allowed: false,
      blocked: true,
      quarantined: false,
      requiresApproval: false,
      reasons: ['Validation system error'],
      triggeredRules: [],
      riskScore: 100,
    };
  }
}